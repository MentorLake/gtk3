namespace MentorLake.Gio;

/// <summary>
/// <para>
/// `GStaticResource` is an opaque data structure and can only be accessed
/// using the following functions.
/// </para>
/// </summary>

public class GStaticResourceHandle : BaseSafeHandle
{
}


public static class GStaticResourceExtensions
{
/// <summary>
/// <para>
/// Finalizes a [struct@Gio.Resource] initialized by
/// [method@Gio.StaticResource.init].
/// </para>
/// <para>
/// This is normally used by code generated by
/// <see href="glib-compile-resources.html">glib-compile-resources</see>
/// and is not typically used by other code.
/// </para>
/// </summary>

/// <param name="static_resource">
/// pointer to a static [struct@Gio.StaticResource]
/// </param>

	public static void Fini(this MentorLake.Gio.GStaticResourceHandle static_resource)
	{
		if (static_resource.IsInvalid) throw new Exception("Invalid handle (GStaticResource)");
		GStaticResourceExterns.g_static_resource_fini(static_resource);
	}

/// <summary>
/// <para>
/// Gets the [struct@Gio.Resource] that was registered by a call to
/// [method@Gio.StaticResource.init].
/// </para>
/// <para>
/// This is normally used by code generated by
/// <see href="glib-compile-resources.html">glib-compile-resources</see>
/// and is not typically used by other code.
/// </para>
/// </summary>

/// <param name="static_resource">
/// pointer to a static [struct@Gio.StaticResource]
/// </param>
/// <return>
/// a [struct@Gio.Resource]
/// </return>

	public static MentorLake.Gio.GResourceHandle GetResource(this MentorLake.Gio.GStaticResourceHandle static_resource)
	{
		if (static_resource.IsInvalid) throw new Exception("Invalid handle (GStaticResource)");
		return GStaticResourceExterns.g_static_resource_get_resource(static_resource);
	}

/// <summary>
/// <para>
/// Initializes a [struct@Gio.Resource] from static data using a
/// [struct@Gio.StaticResource].
/// </para>
/// <para>
/// This is normally used by code generated by
/// <see href="glib-compile-resources.html">glib-compile-resources</see>
/// and is not typically used by other code.
/// </para>
/// </summary>

/// <param name="static_resource">
/// pointer to a static [struct@Gio.StaticResource]
/// </param>

	public static void Init(this MentorLake.Gio.GStaticResourceHandle static_resource)
	{
		if (static_resource.IsInvalid) throw new Exception("Invalid handle (GStaticResource)");
		GStaticResourceExterns.g_static_resource_init(static_resource);
	}


	public static GStaticResource Dereference(this GStaticResourceHandle x) => System.Runtime.InteropServices.Marshal.PtrToStructure<GStaticResource>(x.DangerousGetHandle());
}
internal class GStaticResourceExterns
{
	[DllImport(GioLibrary.Name)]
	internal static extern void g_static_resource_fini([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gio.GStaticResourceHandle>))] MentorLake.Gio.GStaticResourceHandle static_resource);

	[DllImport(GioLibrary.Name)]
	[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gio.GResourceHandle>))]
	internal static extern MentorLake.Gio.GResourceHandle g_static_resource_get_resource([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gio.GStaticResourceHandle>))] MentorLake.Gio.GStaticResourceHandle static_resource);

	[DllImport(GioLibrary.Name)]
	internal static extern void g_static_resource_init([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gio.GStaticResourceHandle>))] MentorLake.Gio.GStaticResourceHandle static_resource);

}

/// <summary>
/// <para>
/// `GStaticResource` is an opaque data structure and can only be accessed
/// using the following functions.
/// </para>
/// </summary>

public struct GStaticResource
{
}
