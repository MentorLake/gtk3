namespace MentorLake.GLib;

/// <summary>
/// <para>
/// Specifies the type of the function passed to g_regex_replace_eval().
/// It is called for each occurrence of the pattern in the string passed
/// to g_regex_replace_eval(), and it should append the replacement to
/// @result.
/// </para>
/// </summary>

/// <param name="match_info">
/// the #GMatchInfo generated by the match.
///     Use g_match_info_get_regex() and g_match_info_get_string() if you
///     need the #GRegex or the matched string.
/// </param>
/// <param name="result">
/// a #GString containing the new string
/// </param>
/// <param name="user_data">
/// user data passed to g_regex_replace_eval()
/// </param>
/// <return>
/// %FALSE to continue the replacement process, %TRUE to stop it
/// </return>

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate bool GRegexEvalCallback([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.GLib.GMatchInfoHandle>))] MentorLake.GLib.GMatchInfoHandle match_info, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.GLib.GStringHandle>))] MentorLake.GLib.GStringHandle result, IntPtr user_data);
