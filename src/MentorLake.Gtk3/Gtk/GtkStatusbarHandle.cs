namespace MentorLake.Gtk;

/// <summary>
/// <para>
/// A #GtkStatusbar is usually placed along the bottom of an application&apos;s
/// main #GtkWindow. It may provide a regular commentary of the application&apos;s
/// status (as is usually the case in a web browser, for example), or may be
/// used to simply output a message when the status changes, (when an upload
/// is complete in an FTP client, for example).
/// </para>
/// <para>
/// Status bars in GTK+ maintain a stack of messages. The message at
/// the top of the each bar’s stack is the one that will currently be displayed.
/// </para>
/// <para>
/// Any messages added to a statusbar’s stack must specify a
/// context id that is used to uniquely identify
/// the source of a message. This context id can be generated by
/// gtk_statusbar_get_context_id(), given a message and the statusbar that
/// it will be added to. Note that messages are stored in a stack, and when
/// choosing which message to display, the stack structure is adhered to,
/// regardless of the context identifier of a message.
/// </para>
/// <para>
/// One could say that a statusbar maintains one stack of messages for
/// display purposes, but allows multiple message producers to maintain
/// sub-stacks of the messages they produced (via context ids).
/// </para>
/// <para>
/// Status bars are created using gtk_statusbar_new().
/// </para>
/// <para>
/// Messages are added to the bar’s stack with gtk_statusbar_push().
/// </para>
/// <para>
/// The message at the top of the stack can be removed using
/// gtk_statusbar_pop(). A message can be removed from anywhere in the
/// stack if its message id was recorded at the time it was added. This
/// is done using gtk_statusbar_remove().
/// </para>
/// <para>
/// # CSS node
/// </para>
/// <para>
/// GtkStatusbar has a single CSS node with name statusbar.
/// </para>
/// </summary>

public class GtkStatusbarHandle : GtkBoxHandle, AtkImplementorIfaceHandle, GtkBuildableHandle, GtkOrientableHandle
{
/// <summary>
/// <para>
/// Creates a new #GtkStatusbar ready for messages.
/// </para>
/// </summary>

/// <return>
/// the new #GtkStatusbar
/// </return>

	public static MentorLake.Gtk.GtkStatusbarHandle New()
	{
		return GtkStatusbarHandleExterns.gtk_statusbar_new();
	}

}
public static class GtkStatusbarHandleSignalExtensions
{
/// <summary>
/// <para>
/// Is emitted whenever a new message is popped off a statusbar&apos;s stack.
/// </para>
/// </summary>

	public static IObservable<GtkStatusbarHandleSignalStructs.TextPoppedSignal> Signal_TextPopped(this GtkStatusbarHandle instance, GConnectFlags connectFlags = GConnectFlags.G_CONNECT_AFTER)
	{
		return Observable.Create((IObserver<GtkStatusbarHandleSignalStructs.TextPoppedSignal> obs) =>
		{
			GtkStatusbarHandleSignalDelegates.text_popped handler = ( MentorLake.Gtk.GtkStatusbarHandle self,  uint context_id,  string text,  IntPtr user_data) =>
			{
				

				var signalStruct = new GtkStatusbarHandleSignalStructs.TextPoppedSignal()
				{
					Self = self, ContextId = context_id, Text = text, UserData = user_data
				};

				obs.OnNext(signalStruct);
				return ;
			};

			var gcHandle = System.Runtime.InteropServices.GCHandle.Alloc(handler);
			var handlerId = GObjectGlobalFunctions.SignalConnectData(instance, "text-popped", Marshal.GetFunctionPointerForDelegate(handler), IntPtr.Zero, null, connectFlags);

			return Disposable.Create(() =>
			{
				GObjectGlobalFunctions.SignalHandlerDisconnect(instance, handlerId);
				obs.OnCompleted();
				gcHandle.Free();
			});
		});
	}
/// <summary>
/// <para>
/// Is emitted whenever a new message gets pushed onto a statusbar&apos;s stack.
/// </para>
/// </summary>

	public static IObservable<GtkStatusbarHandleSignalStructs.TextPushedSignal> Signal_TextPushed(this GtkStatusbarHandle instance, GConnectFlags connectFlags = GConnectFlags.G_CONNECT_AFTER)
	{
		return Observable.Create((IObserver<GtkStatusbarHandleSignalStructs.TextPushedSignal> obs) =>
		{
			GtkStatusbarHandleSignalDelegates.text_pushed handler = ( MentorLake.Gtk.GtkStatusbarHandle self,  uint context_id,  string text,  IntPtr user_data) =>
			{
				

				var signalStruct = new GtkStatusbarHandleSignalStructs.TextPushedSignal()
				{
					Self = self, ContextId = context_id, Text = text, UserData = user_data
				};

				obs.OnNext(signalStruct);
				return ;
			};

			var gcHandle = System.Runtime.InteropServices.GCHandle.Alloc(handler);
			var handlerId = GObjectGlobalFunctions.SignalConnectData(instance, "text-pushed", Marshal.GetFunctionPointerForDelegate(handler), IntPtr.Zero, null, connectFlags);

			return Disposable.Create(() =>
			{
				GObjectGlobalFunctions.SignalHandlerDisconnect(instance, handlerId);
				obs.OnCompleted();
				gcHandle.Free();
			});
		});
	}
}

public static class GtkStatusbarHandleSignalStructs
{

public class TextPoppedSignal
{

	public MentorLake.Gtk.GtkStatusbarHandle Self;
/// <summary>
/// <para>
/// the context id of the relevant message/statusbar
/// </para>
/// </summary>

	public uint ContextId;
/// <summary>
/// <para>
/// the message that was just popped
/// </para>
/// </summary>

	public string Text;

	public IntPtr UserData;
}

public class TextPushedSignal
{

	public MentorLake.Gtk.GtkStatusbarHandle Self;
/// <summary>
/// <para>
/// the context id of the relevant message/statusbar
/// </para>
/// </summary>

	public uint ContextId;
/// <summary>
/// <para>
/// the message that was pushed
/// </para>
/// </summary>

	public string Text;

	public IntPtr UserData;
}
}

public static class GtkStatusbarHandleSignalDelegates
{

/// <summary>
/// <para>
/// Is emitted whenever a new message is popped off a statusbar&apos;s stack.
/// </para>
/// </summary>

/// <param name="self">
/// </param>
/// <param name="context_id">
/// the context id of the relevant message/statusbar
/// </param>
/// <param name="text">
/// the message that was just popped
/// </param>
/// <param name="user_data">
/// </param>

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void text_popped([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle self, uint context_id, string text, IntPtr user_data);


/// <summary>
/// <para>
/// Is emitted whenever a new message gets pushed onto a statusbar&apos;s stack.
/// </para>
/// </summary>

/// <param name="self">
/// </param>
/// <param name="context_id">
/// the context id of the relevant message/statusbar
/// </param>
/// <param name="text">
/// the message that was pushed
/// </param>
/// <param name="user_data">
/// </param>

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void text_pushed([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle self, uint context_id, string text, IntPtr user_data);

}


public static class GtkStatusbarHandleExtensions
{
/// <summary>
/// <para>
/// Returns a new context identifier, given a description
/// of the actual context. Note that the description is
/// not shown in the UI.
/// </para>
/// </summary>

/// <param name="statusbar">
/// a #GtkStatusbar
/// </param>
/// <param name="context_description">
/// textual description of what context
///                       the new message is being used in
/// </param>
/// <return>
/// an integer id
/// </return>

	public static uint GetContextId(this MentorLake.Gtk.GtkStatusbarHandle statusbar, string context_description)
	{
		if (statusbar.IsInvalid) throw new Exception("Invalid handle (GtkStatusbarHandle)");
		return GtkStatusbarHandleExterns.gtk_statusbar_get_context_id(statusbar, context_description);
	}

/// <summary>
/// <para>
/// Retrieves the box containing the label widget.
/// </para>
/// </summary>

/// <param name="statusbar">
/// a #GtkStatusbar
/// </param>
/// <return>
/// a #GtkBox
/// </return>

	public static MentorLake.Gtk.GtkWidgetHandle GetMessageArea(this MentorLake.Gtk.GtkStatusbarHandle statusbar)
	{
		if (statusbar.IsInvalid) throw new Exception("Invalid handle (GtkStatusbarHandle)");
		return GtkStatusbarHandleExterns.gtk_statusbar_get_message_area(statusbar);
	}

/// <summary>
/// <para>
/// Removes the first message in the #GtkStatusbar’s stack
/// with the given context id.
/// </para>
/// <para>
/// Note that this may not change the displayed message, if
/// the message at the top of the stack has a different
/// context id.
/// </para>
/// </summary>

/// <param name="statusbar">
/// a #GtkStatusbar
/// </param>
/// <param name="context_id">
/// a context identifier
/// </param>

	public static T Pop<T>(this T statusbar, uint context_id) where T : GtkStatusbarHandle
	{
		if (statusbar.IsInvalid) throw new Exception("Invalid handle (GtkStatusbarHandle)");
		GtkStatusbarHandleExterns.gtk_statusbar_pop(statusbar, context_id);
		return statusbar;
	}

/// <summary>
/// <para>
/// Pushes a new message onto a statusbar’s stack.
/// </para>
/// </summary>

/// <param name="statusbar">
/// a #GtkStatusbar
/// </param>
/// <param name="context_id">
/// the message’s context id, as returned by
///              gtk_statusbar_get_context_id()
/// </param>
/// <param name="text">
/// the message to add to the statusbar
/// </param>
/// <return>
/// a message id that can be used with
///          gtk_statusbar_remove().
/// </return>

	public static uint Push(this MentorLake.Gtk.GtkStatusbarHandle statusbar, uint context_id, string text)
	{
		if (statusbar.IsInvalid) throw new Exception("Invalid handle (GtkStatusbarHandle)");
		return GtkStatusbarHandleExterns.gtk_statusbar_push(statusbar, context_id, text);
	}

/// <summary>
/// <para>
/// Forces the removal of a message from a statusbar’s stack.
/// The exact @context_id and @message_id must be specified.
/// </para>
/// </summary>

/// <param name="statusbar">
/// a #GtkStatusbar
/// </param>
/// <param name="context_id">
/// a context identifier
/// </param>
/// <param name="message_id">
/// a message identifier, as returned by gtk_statusbar_push()
/// </param>

	public static T Remove<T>(this T statusbar, uint context_id, uint message_id) where T : GtkStatusbarHandle
	{
		if (statusbar.IsInvalid) throw new Exception("Invalid handle (GtkStatusbarHandle)");
		GtkStatusbarHandleExterns.gtk_statusbar_remove(statusbar, context_id, message_id);
		return statusbar;
	}

/// <summary>
/// <para>
/// Forces the removal of all messages from a statusbar&apos;s
/// stack with the exact @context_id.
/// </para>
/// </summary>

/// <param name="statusbar">
/// a #GtkStatusbar
/// </param>
/// <param name="context_id">
/// a context identifier
/// </param>

	public static T RemoveAll<T>(this T statusbar, uint context_id) where T : GtkStatusbarHandle
	{
		if (statusbar.IsInvalid) throw new Exception("Invalid handle (GtkStatusbarHandle)");
		GtkStatusbarHandleExterns.gtk_statusbar_remove_all(statusbar, context_id);
		return statusbar;
	}

}

internal class GtkStatusbarHandleExterns
{
	[DllImport(GtkLibrary.Name)]
	[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstructorSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))]
	internal static extern MentorLake.Gtk.GtkStatusbarHandle gtk_statusbar_new();

	[DllImport(GtkLibrary.Name)]
	internal static extern uint gtk_statusbar_get_context_id([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle statusbar, string context_description);

	[DllImport(GtkLibrary.Name)]
	[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkWidgetHandle>))]
	internal static extern MentorLake.Gtk.GtkWidgetHandle gtk_statusbar_get_message_area([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle statusbar);

	[DllImport(GtkLibrary.Name)]
	internal static extern void gtk_statusbar_pop([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle statusbar, uint context_id);

	[DllImport(GtkLibrary.Name)]
	internal static extern uint gtk_statusbar_push([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle statusbar, uint context_id, string text);

	[DllImport(GtkLibrary.Name)]
	internal static extern void gtk_statusbar_remove([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle statusbar, uint context_id, uint message_id);

	[DllImport(GtkLibrary.Name)]
	internal static extern void gtk_statusbar_remove_all([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(DelegateSafeHandleMarshaller<MentorLake.Gtk.GtkStatusbarHandle>))] MentorLake.Gtk.GtkStatusbarHandle statusbar, uint context_id);

}
